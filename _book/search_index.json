[["index.html", "1 Light Partitioning", " 1 Light Partitioning This bookdown documents the harmonization process for parameters from the Water Quality Portal. "],["pre-harmonization-decision-process.html", "2 Pre-harmonization decision process", " 2 Pre-harmonization decision process step_order_rev &lt;- max(documented_drops$order):min(documented_drops$order) documented_drops %&gt;% group_by(step) %&gt;% mutate(scaled = scale(n_rows, center = FALSE)) %&gt;% ungroup() %&gt;% mutate(order = factor(order, levels = step_order_rev), rows_label = paste0(round((n_rows / 1000000), 1), &quot; M&quot;)) %&gt;% filter(step == &quot;pre-harmonization&quot;) %&gt;% ggplot() + geom_bar(aes(x = order, y = scaled, fill = order), stat = &quot;identity&quot;) + geom_text(aes(x = order, y = scaled + 0.15, label = rows_label)) + xlab(&quot;Step number&quot;) + ylab(NULL) + scale_fill_viridis_d() + coord_flip() + theme_bw() + theme(axis.text.x = element_blank(), legend.position = &quot;none&quot;) "],["chlorophyll-harmonization-process-strict-version.html", "3 Chlorophyll harmonization process (strict version)", " 3 Chlorophyll harmonization process (strict version) 3.0.1 0. Initial dataset After the preharmonization process the chlorophyll-only WQP dataset contains 3.41 million rows. 3.0.2 1. Filter for water media The first step in harmonization is to ensure that the media type for the data is \"water\" or \"Water\". This should just be a precautionary step: 0 rows are removed. The final row count after this is 3.41 million. 3.0.3 2. Keep only chlorophyll parameters The next step is to ensure that there are only parameter names related to chlorophyll a in the dataset. We retain the following values: Chlorophyll a Chlorophyll a (probe relative fluorescence) Chlorophyll a, corrected for pheophytin Chlorophyll a (probe) Chlorophyll a, free of pheophytin Chlorophyll a - Phytoplankton (suspended) 1.29 million rows are removed and 2.12 million rows remain. 3.0.4 3. Remove fails and other missing data In this step we filter out records based on indications that they have failed data for some reason. We screen the following columns: ActivityCommentText, ResultLaboratoryCommentText, ResultCommentText, and ResultMeasureValue. Examples of text that results in a dropped record includes (but is not limited to): \"fail\", \"suspect\", \"error\", \"beyond accept\", \"interference\", \"questionable\", \"problem\", \"violation\", \"rejected\", \"no data\". Specific target text varies by column. 84.07 thousand rows are removed and 2.04 million rows remain. 3.0.5 4. Clean MDLs In this step method detection limits (MDLs) are used to clean up the reported values. When a numeric value is missing for the data record (i.e., NA or text that became NA during an as.numeric call) we check for non-detect language in the ResultLaboratoryCommentText, ResultCommentText, ResultDetectionConditionText, and ResultMeasureValue columns. This language can be \"non-detect\", \"not detect\", \"non detect\", \"undetect\", or \"below\". If non-detect language exists then we use the DetectionQuantitationLimitMeasure.MeasureValue column for the MDL, otherwise if there is a &lt; and a number in the ResultMeasureValue column we use that number instead. We then use a random number between 0 and 0.5 * MDL as the record’s value moving forward. This should not result in a change in rows but we still check: 0 rows are removed. The final row count after this is 2.04 million. 3.0.6 5. Clean approximate values Step 5 involves a similar process as for MDL cleaning. We flag “approximated” values in the dataset. The ResultMeasureValue column gets checked for all three of the following conditions: Numeric-only version of the column is still NA after MDL cleaning The original column text contained a number Any of ResultLaboratoryCommentText, ResultCommentText, or ResultDetectionConditionText match this regular expression, ignoring case: \"result approx|RESULT IS APPROX|value approx\" We then use the approximate value as the record’s value moving forward. This should not result in a change in rows but we still check: 0 rows are removed. The final row count after this is 2.04 million. 3.0.7 6. Clean values with “greater than” data Step 6 is similar to the MDL and approximate value cleaning processes, and follows the approximate cleaning process most closely. The goal is to clean up values that were entered as “greater than” some value. The ResultMeasureValue column gets checked for all three of the following conditions: Numeric-only version of the column is still NA after MDL &amp; approximate cleaning The original column text contained a number The original column text contained a &gt; We then use the “greater than” value (without &gt;) as the record’s value moving forward. This should not result in a change in rows but we still check: 0 rows are removed. The final row count after this is 2.04 million. 3.0.8 7. Harmonize record units The next step in chla harmonization is working with the units of the WQP records. These can vary widely. We create the following conversion table, which is used to translate units provided in WQP into micrograms/L: units conversion mg/l 1e+03 mg/L 1e+03 ppm 1e+03 ug/l 1e+00 ug/L 1e+00 mg/m3 1e+00 ppb 1e+00 mg/cm3 1e+06 ug/ml 1e+03 mg/ml 1e+06 ppt 1e+06 This should not result in a change in rows but we still check: 1.271^{5} rows are removed. The final row count after this is 1.91 million. 3.0.9 8. Clean depth data The ActivityDepthHeightMeasure.MeasureValue column is the site of our next harmonization step. We want to both harmonize the units (ActivityDepthHeightMeasure.MeasureUnitCode) used in the dataset and set limits for depths from which we’ll accept data. We’ll use a conversion table as with the previous units harmonization step: depth_units depth_conversion in 0.0254 ft 0.3048 feet 0.3048 cm 0.0100 m 1.0000 meters 1.0000 Once the units have been standardized we’ll make sure that the numeric depth value is within +/-2m OR the raw character version indicates something similar. We also keep NA depths to avoid losing a ton of records. This is how it’s coded: converted_units_chla %&gt;% left_join(x = ., y = depth_unit_conversion_table, by = c(&quot;sample_depth_unit&quot; = &quot;depth_units&quot;)) %&gt;% mutate(harmonized_depth_value = as.numeric(sample_depth) * depth_conversion, harmonized_depth_unit = &quot;m&quot;) %&gt;% filter(abs(harmonized_depth_value) &lt;= 2 | sample_depth %in% c(&quot;0-2&quot;, &quot;0-0.5&quot;)| is.na(sample_depth)) Through our depth filtering we lose 121.13 thousand rows and have 1.79 million remaining. 3.0.10 9. Filter based on analytical method Our next step is to aggregate chla analytical methods into groups and then filter out methods that may have been erroneously added, were unclear, or which don’t meet our needs. We accomplish this using an external match table csv file that is joined to the dataset. Methods that are NA for their aggregated grouping or which are \"unlikely\" to be accurate methods are dropped. This process drops 2648 rows leaving 1.79 million remaining. 3.0.11 10. Filter based on fraction type The final step in our chla harmonization is filtering based on the ResultSampleFractionText column. We assign fractions into two categories based on whether the fraction text makes sense or not and then retain only those records that have a fraction with \"Makes sense\". Fractions included in this are \"Non-Filterable (Particle)\", \"Suspended\", \"Non-filterable\", \"&lt;Blank&gt;\", and \"Acid Soluble\". This process drops 116.99 thousand rows leaving 1.67 million remaining in the final harmonized chla dataset. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
